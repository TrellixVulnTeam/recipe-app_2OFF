{"ast":null,"code":"import { DRINKS_ALL_CATEGORIES_ENDPOINT } from '../../services/drinks';\nimport fetchAPI from '../../services';\nexport const LOADING_DRINK_RECIPES = 'LOADING_DRINK_RECIPES';\nexport const FINISHED_LOADING_DRINK_RECIPES = 'FINISHED_LOADING_DRINK_RECIPES';\nexport const LOADING_DRINK_RECIPES_FAILED = 'LOADING_DRINK_RECIPES_FAILED';\nexport const SET_DRINKS = 'SET_DRINKS';\nexport const LOADING_DRINK_CATEGORIES = 'LOADING_DRINK_CATEGORIES';\nexport const FINISHED_LOADING_DRINK_CATEGORIES = 'FINISHED_LOADING_DRINK_CATEGORIES';\nexport const LOADING_DRINK_CATEGORIES_FAILED = 'LOADING_DRINK_CATEGORIES_FAILED';\nexport const SET_DRINK_CATEGORIES = 'SET_DRINK_CATEGORIES';\nexport const CHANGE_DRINK_CATEGORY = 'CHANGE_DRINK_CATEGORY';\n\nfunction loadingRecipes() {\n  return {\n    type: LOADING_DRINK_RECIPES\n  };\n}\n\nfunction finishedLoadingRecipes(payload) {\n  return {\n    type: FINISHED_LOADING_DRINK_RECIPES,\n    payload\n  };\n}\n\nfunction loadingRecipesFailed(payload) {\n  return {\n    type: LOADING_DRINK_RECIPES_FAILED,\n    payload\n  };\n}\n\nfunction setMeals(payload) {\n  return {\n    type: SET_DRINKS,\n    payload\n  };\n}\n\nexport function getDrinkRecipesAPIThunk(URL) {\n  const LAST_DRINK_INDEX = 12;\n\n  const onlyTheFirst12 = (_recipe, index) => index < LAST_DRINK_INDEX;\n\n  return async dispatch => {\n    dispatch(loadingRecipes());\n\n    try {\n      const response = await fetchAPI(URL);\n      dispatch(setMeals(response.drinks.filter(onlyTheFirst12)));\n    } catch (e) {\n      console.error(e);\n      dispatch(loadingRecipesFailed(e));\n    }\n\n    dispatch(finishedLoadingRecipes());\n  };\n}\n\nfunction loadingCategories() {\n  return {\n    type: LOADING_DRINK_CATEGORIES\n  };\n}\n\nfunction finishedLoadingCategories(payload) {\n  return {\n    type: FINISHED_LOADING_DRINK_CATEGORIES,\n    payload\n  };\n}\n\nfunction loadingCategoriesFailed(payload) {\n  return {\n    type: LOADING_DRINK_CATEGORIES_FAILED,\n    payload\n  };\n}\n\nfunction setCategories(payload) {\n  return {\n    type: SET_DRINK_CATEGORIES,\n    payload\n  };\n}\n\nexport function getDrinkCategoriesAPIThunk() {\n  const LAST_CATEGORY_INDEX = 5;\n\n  const onlyTheFirst5 = (_recipe, index) => index < LAST_CATEGORY_INDEX;\n\n  return async dispatch => {\n    dispatch(loadingCategories());\n\n    try {\n      const response = await fetchAPI(DRINKS_ALL_CATEGORIES_ENDPOINT);\n      dispatch(setCategories(response.drinks.filter(onlyTheFirst5)));\n    } catch (e) {\n      console.error(e);\n      dispatch(loadingCategoriesFailed(e));\n    }\n\n    dispatch(finishedLoadingCategories());\n  };\n}\nexport function changeCategory(payload) {\n  return {\n    type: CHANGE_DRINK_CATEGORY,\n    payload\n  };\n}","map":{"version":3,"sources":["/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-recipes-app/src/redux/actions/drinksAction.js"],"names":["DRINKS_ALL_CATEGORIES_ENDPOINT","fetchAPI","LOADING_DRINK_RECIPES","FINISHED_LOADING_DRINK_RECIPES","LOADING_DRINK_RECIPES_FAILED","SET_DRINKS","LOADING_DRINK_CATEGORIES","FINISHED_LOADING_DRINK_CATEGORIES","LOADING_DRINK_CATEGORIES_FAILED","SET_DRINK_CATEGORIES","CHANGE_DRINK_CATEGORY","loadingRecipes","type","finishedLoadingRecipes","payload","loadingRecipesFailed","setMeals","getDrinkRecipesAPIThunk","URL","LAST_DRINK_INDEX","onlyTheFirst12","_recipe","index","dispatch","response","drinks","filter","e","console","error","loadingCategories","finishedLoadingCategories","loadingCategoriesFailed","setCategories","getDrinkCategoriesAPIThunk","LAST_CATEGORY_INDEX","onlyTheFirst5","changeCategory"],"mappings":"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","sourcesContent":["import { DRINKS_ALL_CATEGORIES_ENDPOINT } from '../../services/drinks';\nimport fetchAPI from '../../services';\n\nexport const LOADING_DRINK_RECIPES = 'LOADING_DRINK_RECIPES';\nexport const FINISHED_LOADING_DRINK_RECIPES = 'FINISHED_LOADING_DRINK_RECIPES';\nexport const LOADING_DRINK_RECIPES_FAILED = 'LOADING_DRINK_RECIPES_FAILED';\nexport const SET_DRINKS = 'SET_DRINKS';\nexport const LOADING_DRINK_CATEGORIES = 'LOADING_DRINK_CATEGORIES';\nexport const FINISHED_LOADING_DRINK_CATEGORIES = 'FINISHED_LOADING_DRINK_CATEGORIES';\nexport const LOADING_DRINK_CATEGORIES_FAILED = 'LOADING_DRINK_CATEGORIES_FAILED';\nexport const SET_DRINK_CATEGORIES = 'SET_DRINK_CATEGORIES';\nexport const CHANGE_DRINK_CATEGORY = 'CHANGE_DRINK_CATEGORY';\n\nfunction loadingRecipes() {\n  return {\n    type: LOADING_DRINK_RECIPES,\n  };\n}\nfunction finishedLoadingRecipes(payload) {\n  return {\n    type: FINISHED_LOADING_DRINK_RECIPES,\n    payload,\n  };\n}\nfunction loadingRecipesFailed(payload) {\n  return {\n    type: LOADING_DRINK_RECIPES_FAILED,\n    payload,\n  };\n}\nfunction setMeals(payload) {\n  return {\n    type: SET_DRINKS,\n    payload,\n  };\n}\nexport function getDrinkRecipesAPIThunk(URL) {\n  const LAST_DRINK_INDEX = 12;\n  const onlyTheFirst12 = (_recipe, index) => index < LAST_DRINK_INDEX;\n  return async (dispatch) => {\n    dispatch(loadingRecipes());\n    try {\n      const response = await fetchAPI(URL);\n      dispatch(setMeals(response.drinks.filter(onlyTheFirst12)));\n    } catch (e) {\n      console.error(e);\n      dispatch(loadingRecipesFailed(e));\n    }\n    dispatch(finishedLoadingRecipes());\n  };\n}\n\nfunction loadingCategories() {\n  return {\n    type: LOADING_DRINK_CATEGORIES,\n  };\n}\nfunction finishedLoadingCategories(payload) {\n  return {\n    type: FINISHED_LOADING_DRINK_CATEGORIES,\n    payload,\n  };\n}\nfunction loadingCategoriesFailed(payload) {\n  return {\n    type: LOADING_DRINK_CATEGORIES_FAILED,\n    payload,\n  };\n}\nfunction setCategories(payload) {\n  return {\n    type: SET_DRINK_CATEGORIES,\n    payload,\n  };\n}\nexport function getDrinkCategoriesAPIThunk() {\n  const LAST_CATEGORY_INDEX = 5;\n  const onlyTheFirst5 = (_recipe, index) => index < LAST_CATEGORY_INDEX;\n  return async (dispatch) => {\n    dispatch(loadingCategories());\n    try {\n      const response = await fetchAPI(DRINKS_ALL_CATEGORIES_ENDPOINT);\n      dispatch(setCategories(response.drinks.filter(onlyTheFirst5)));\n    } catch (e) {\n      console.error(e);\n      dispatch(loadingCategoriesFailed(e));\n    }\n    dispatch(finishedLoadingCategories());\n  };\n}\n\nexport function changeCategory(payload) {\n  return {\n    type: CHANGE_DRINK_CATEGORY,\n    payload,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}