{"ast":null,"code":"import { MEALS_ALL_CATEGORIES_ENDPOINT } from '../../services/meals';\nimport fetchAPI from '../../services';\nexport const LOADING_MEAL_RECIPES = 'LOADING_MEAL_RECIPES';\nexport const FINISHED_LOADING_MEAL_RECIPES = 'FINISHED_LOADING_MEAL_RECIPES';\nexport const LOADING_MEAL_RECIPES_FAILED = 'LOADING_MEAL_RECIPES_FAILED';\nexport const SET_MEALS = 'SET_MEALS';\nexport const LOADING_MEAL_CATEGORIES = 'LOADING_MEAL_CATEGORIES';\nexport const FINISHED_LOADING_MEAL_CATEGORIES = 'FINISHED_LOADING_MEAL_CATEGORIES';\nexport const LOADING_MEAL_CATEGORIES_FAILED = 'LOADING_MEAL_CATEGORIES_FAILED';\nexport const SET_MEAL_CATEGORIES = 'SET_MEAL_CATEGORIES';\nexport const CHANGE_MEAL_CATEGORY = 'CHANGE_MEAL_CATEGORY';\n\nfunction loadingRecipes() {\n  return {\n    type: LOADING_MEAL_RECIPES\n  };\n}\n\nfunction finishedLoadingRecipes(payload) {\n  return {\n    type: FINISHED_LOADING_MEAL_RECIPES,\n    payload\n  };\n}\n\nfunction loadingRecipesFailed(payload) {\n  return {\n    type: LOADING_MEAL_RECIPES_FAILED,\n    payload\n  };\n}\n\nfunction setMeals(payload) {\n  return {\n    type: SET_MEALS,\n    payload\n  };\n}\n\nexport function getFoodRecipesAPIThunk(URL) {\n  const LAST_MEAL_INDEX = 12;\n\n  const onlyTheFirst12 = (_recipe, index) => index < LAST_MEAL_INDEX;\n\n  return async dispatch => {\n    dispatch(loadingRecipes());\n\n    try {\n      const response = await fetchAPI(URL);\n      dispatch(setMeals(response.meals.filter(onlyTheFirst12)));\n    } catch (e) {\n      console.error(e);\n      dispatch(loadingRecipesFailed(e));\n    }\n\n    dispatch(finishedLoadingRecipes());\n  };\n}\n\nfunction loadingCategories() {\n  return {\n    type: LOADING_MEAL_CATEGORIES\n  };\n}\n\nfunction finishedLoadingCategories(payload) {\n  return {\n    type: FINISHED_LOADING_MEAL_CATEGORIES,\n    payload\n  };\n}\n\nfunction loadingCategoriesFailed(payload) {\n  return {\n    type: LOADING_MEAL_CATEGORIES_FAILED,\n    payload\n  };\n}\n\nfunction setCategories(payload) {\n  return {\n    type: SET_MEAL_CATEGORIES,\n    payload\n  };\n}\n\nexport function getFoodCategoriesAPIThunk() {\n  const LAST_CATEGORY_INDEX = 5;\n\n  const onlyTheFirst5 = (_recipe, index) => index < LAST_CATEGORY_INDEX;\n\n  return async dispatch => {\n    dispatch(loadingCategories());\n\n    try {\n      const response = await fetchAPI(MEALS_ALL_CATEGORIES_ENDPOINT);\n      dispatch(setCategories(response.meals.filter(onlyTheFirst5)));\n    } catch (e) {\n      console.error(e);\n      dispatch(loadingCategoriesFailed(e));\n    }\n\n    dispatch(finishedLoadingCategories());\n  };\n}\nexport function changeCategory(payload) {\n  return {\n    type: CHANGE_MEAL_CATEGORY,\n    payload\n  };\n}","map":{"version":3,"sources":["/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-recipes-app/src/redux/actions/mealsAction.js"],"names":["MEALS_ALL_CATEGORIES_ENDPOINT","fetchAPI","LOADING_MEAL_RECIPES","FINISHED_LOADING_MEAL_RECIPES","LOADING_MEAL_RECIPES_FAILED","SET_MEALS","LOADING_MEAL_CATEGORIES","FINISHED_LOADING_MEAL_CATEGORIES","LOADING_MEAL_CATEGORIES_FAILED","SET_MEAL_CATEGORIES","CHANGE_MEAL_CATEGORY","loadingRecipes","type","finishedLoadingRecipes","payload","loadingRecipesFailed","setMeals","getFoodRecipesAPIThunk","URL","LAST_MEAL_INDEX","onlyTheFirst12","_recipe","index","dispatch","response","meals","filter","e","console","error","loadingCategories","finishedLoadingCategories","loadingCategoriesFailed","setCategories","getFoodCategoriesAPIThunk","LAST_CATEGORY_INDEX","onlyTheFirst5","changeCategory"],"mappings":"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","sourcesContent":["import { MEALS_ALL_CATEGORIES_ENDPOINT } from '../../services/meals';\nimport fetchAPI from '../../services';\n\nexport const LOADING_MEAL_RECIPES = 'LOADING_MEAL_RECIPES';\nexport const FINISHED_LOADING_MEAL_RECIPES = 'FINISHED_LOADING_MEAL_RECIPES';\nexport const LOADING_MEAL_RECIPES_FAILED = 'LOADING_MEAL_RECIPES_FAILED';\nexport const SET_MEALS = 'SET_MEALS';\nexport const LOADING_MEAL_CATEGORIES = 'LOADING_MEAL_CATEGORIES';\nexport const FINISHED_LOADING_MEAL_CATEGORIES = 'FINISHED_LOADING_MEAL_CATEGORIES';\nexport const LOADING_MEAL_CATEGORIES_FAILED = 'LOADING_MEAL_CATEGORIES_FAILED';\nexport const SET_MEAL_CATEGORIES = 'SET_MEAL_CATEGORIES';\nexport const CHANGE_MEAL_CATEGORY = 'CHANGE_MEAL_CATEGORY';\n\nfunction loadingRecipes() {\n  return {\n    type: LOADING_MEAL_RECIPES,\n  };\n}\nfunction finishedLoadingRecipes(payload) {\n  return {\n    type: FINISHED_LOADING_MEAL_RECIPES,\n    payload,\n  };\n}\nfunction loadingRecipesFailed(payload) {\n  return {\n    type: LOADING_MEAL_RECIPES_FAILED,\n    payload,\n  };\n}\nfunction setMeals(payload) {\n  return {\n    type: SET_MEALS,\n    payload,\n  };\n}\nexport function getFoodRecipesAPIThunk(URL) {\n  const LAST_MEAL_INDEX = 12;\n  const onlyTheFirst12 = (_recipe, index) => index < LAST_MEAL_INDEX;\n  return async (dispatch) => {\n    dispatch(loadingRecipes());\n    try {\n      const response = await fetchAPI(URL);\n      dispatch(setMeals(response.meals.filter(onlyTheFirst12)));\n    } catch (e) {\n      console.error(e);\n      dispatch(loadingRecipesFailed(e));\n    }\n    dispatch(finishedLoadingRecipes());\n  };\n}\n\nfunction loadingCategories() {\n  return {\n    type: LOADING_MEAL_CATEGORIES,\n  };\n}\nfunction finishedLoadingCategories(payload) {\n  return {\n    type: FINISHED_LOADING_MEAL_CATEGORIES,\n    payload,\n  };\n}\nfunction loadingCategoriesFailed(payload) {\n  return {\n    type: LOADING_MEAL_CATEGORIES_FAILED,\n    payload,\n  };\n}\nfunction setCategories(payload) {\n  return {\n    type: SET_MEAL_CATEGORIES,\n    payload,\n  };\n}\nexport function getFoodCategoriesAPIThunk() {\n  const LAST_CATEGORY_INDEX = 5;\n  const onlyTheFirst5 = (_recipe, index) => index < LAST_CATEGORY_INDEX;\n  return async (dispatch) => {\n    dispatch(loadingCategories());\n    try {\n      const response = await fetchAPI(MEALS_ALL_CATEGORIES_ENDPOINT);\n      dispatch(setCategories(response.meals.filter(onlyTheFirst5)));\n    } catch (e) {\n      console.error(e);\n      dispatch(loadingCategoriesFailed(e));\n    }\n    dispatch(finishedLoadingCategories());\n  };\n}\n\nexport function changeCategory(payload) {\n  return {\n    type: CHANGE_MEAL_CATEGORY,\n    payload,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}